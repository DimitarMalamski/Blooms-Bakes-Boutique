// <auto-generated />
using System;
using Blooms___Bakes_Boutique.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Blooms___Bakes_Boutique.Infrastructure.Migrations
{
    [DbContext(typeof(BloomsAndBakesDbContext))]
    [Migration("20240416211217_PastryAndFlowerTasterAndGathererFKAdded")]
    partial class PastryAndFlowerTasterAndGathererFKAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Blooms___Bakes_Boutique.Infrastructure.Data.Models.Flowers.Florist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Florist Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FlowerMasterTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Florist FlowerMaster Title");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User Identifier");

                    b.HasKey("Id");

                    b.HasIndex("FlowerMasterTitle")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Florists");

                    b.HasComment("Flower's Florist");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FlowerMasterTitle = "Bloomsmith",
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6"
                        },
                        new
                        {
                            Id = 4,
                            FlowerMasterTitle = "Master of Everything",
                            UserId = "e43ce836-997d-4927-ac59-74e8c41bbfd3"
                        });
                });

            modelBuilder.Entity("Blooms___Bakes_Boutique.Infrastructure.Data.Models.Flowers.Flower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Flower Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Category Identifier");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Flower Colour");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Flower Description");

                    b.Property<int>("FloristId")
                        .HasColumnType("int")
                        .HasComment("Florist Identifier");

                    b.Property<string>("GathererId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User id of the Gatherer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Flower Image");

                    b.Property<decimal>("PricePerBouquet")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price Per Bouquet");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Flower Title");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FloristId");

                    b.HasIndex("GathererId");

                    b.ToTable("Flowers");

                    b.HasComment("Flowers to pick");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Colour = "Yellow",
                            Description = "The sunflower is a bright, iconic flower known for its yellow petals and edible seeds. Symbolizing loyalty and adoration, it brings cheer and versatility to gardens and kitchens alike.",
                            FloristId = 1,
                            GathererId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            ImageUrl = "https://www.edenbrothers.com/cdn/shop/products/sunflower-mammoth-grey-stripe-aly-5.jpg?v=1653508165&width=1946",
                            PricePerBouquet = 10.00m,
                            Title = "Sunflower"
                        });
                });

            modelBuilder.Entity("Blooms___Bakes_Boutique.Infrastructure.Data.Models.Flowers.FlowerCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Category Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Category Name");

                    b.HasKey("Id");

                    b.ToTable("FlowersCategories");

                    b.HasComment("Flower's Type/Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Annual"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Perennial"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Biennial"
                        });
                });

            modelBuilder.Entity("Blooms___Bakes_Boutique.Infrastructure.Data.Models.Pastries.Pastry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Pastry Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Category Identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Pastry Description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Pastry Image");

                    b.Property<int>("PatissierId")
                        .HasColumnType("int")
                        .HasComment("Patissier Identifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Pastry Price");

                    b.Property<string>("Recipe")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Pastry Recipe");

                    b.Property<string>("TasterId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User id of the Taster");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Pastry Title");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PatissierId");

                    b.HasIndex("TasterId");

                    b.ToTable("Pastries");

                    b.HasComment("Pastry to taste");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            Description = "Red velvet cupcakes are rich, moist treats with a hint of cocoa and a striking red hue. Topped with creamy cream cheese frosting, they're a perfect blend of sweet and tangy flavors, ideal for any occasion.",
                            ImageUrl = "https://www.livewellbakeoften.com/wp-content/uploads/2021/06/Red-Velvet-Cupcakes-3-New-copy.jpg",
                            PatissierId = 1,
                            Price = 6.00m,
                            Recipe = "Ingredients:\r\n\r\n1 1/4 cups all-purpose flour\r\n1/2 teaspoon baking soda\r\n1/2 teaspoon salt\r\n1 tablespoon unsweetened cocoa powder\r\n1/2 cup unsalted butter, softened\r\n1 cup granulated sugar\r\n2 large eggs\r\n1 teaspoon vanilla extract\r\n1/2 cup buttermilk\r\n1 tablespoon red food coloring\r\n1 teaspoon white vinegar\r\nCream cheese frosting (store-bought or homemade)\r\nInstructions:\r\n\r\nPreheat your oven to 350°F (175°C). Line a muffin tin with cupcake liners.\r\n\r\nIn a medium bowl, sift together the flour, baking soda, salt, and cocoa powder. Set aside.\r\n\r\nIn a large mixing bowl, cream together the butter and sugar until light and fluffy.\r\n\r\nBeat in the eggs, one at a time, then stir in the vanilla extract.\r\n\r\nGradually mix in the dry ingredients, alternating with the buttermilk. Begin and end with the dry ingredients. Mix until just combined.\r\n\r\nIn a small bowl, mix the red food coloring and vinegar together, then add it to the batter. Mix until the color is evenly distributed.\r\n\r\nSpoon the batter into the prepared cupcake liners, filling each about 2/3 full.\r\n\r\nBake in the preheated oven for 18-20 minutes, or until a toothpick inserted into the center comes out clean.\r\n\r\nAllow the cupcakes to cool in the pan for a few minutes, then transfer them to a wire rack to cool completely.\r\n\r\nOnce cooled, frost the cupcakes with cream cheese frosting. You can pipe the frosting on top for a decorative touch if desired.\r\n\r\nServe and enjoy your delicious homemade Red Velvet Cupcakes!\r\n\r\nThis recipe makes about 12 cupcakes. Enjoy baking!",
                            TasterId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            Title = "Red Velvet Cupcakes"
                        });
                });

            modelBuilder.Entity("Blooms___Bakes_Boutique.Infrastructure.Data.Models.Pastries.PastryCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Category Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Category Name");

                    b.HasKey("Id");

                    b.ToTable("PastriesCategories");

                    b.HasComment("Pastry's Type/Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cake"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cupcake"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ice-cream"
                        });
                });

            modelBuilder.Entity("Blooms___Bakes_Boutique.Infrastructure.Data.Models.Pastries.Patissier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Patissier Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("MasterChefTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Patissier MasterChef Title");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User Identifier");

                    b.HasKey("Id");

                    b.HasIndex("MasterChefTitle")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Patissiers");

                    b.HasComment("Pastry's Patissier/Chef");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MasterChefTitle = "Master of the Oven",
                            UserId = "dea12856-c198-4129-b3f3-b893d8395082"
                        },
                        new
                        {
                            Id = 4,
                            MasterChefTitle = "Master of Everything",
                            UserId = "e43ce836-997d-4927-ac59-74e8c41bbfd3"
                        });
                });

            modelBuilder.Entity("Blooms___Bakes_Boutique.Infrastructure.Data.Models.User.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dea12856-c198-4129-b3f3-b893d8395082",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1c2772e9-8b8a-41fe-b424-6568eb578f4a",
                            Email = "patissier@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Dimitar",
                            LastName = "Malamski",
                            LockoutEnabled = false,
                            NormalizedEmail = "patissier@mail.com",
                            NormalizedUserName = "patissier@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEAYF7DqJkRb2ejm2BbmJTh00cA/O1Dripm3cNfBFlDgTAMf6bb6zR50Mvpepi9Va9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0f3d4c2-9706-4bb6-962b-34687e6c0b1d",
                            TwoFactorEnabled = false,
                            UserName = "patissier@mail.com"
                        },
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-59f706d72cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df4c3d9b-8424-40b5-8af8-9a485adbdbaf",
                            Email = "florist@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivana",
                            LastName = "Koroleeva",
                            LockoutEnabled = false,
                            NormalizedEmail = "florist@mail.com",
                            NormalizedUserName = "florist@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEFOuMuH3drcW9vPnbAd+7JaqU48Kly8ws6xCjxC6/knTw6vWuvLM5X4MS6wLcwo3jw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5fc5bc78-a20f-4d7a-9c73-94333156f8ca",
                            TwoFactorEnabled = false,
                            UserName = "florist@mail.com"
                        },
                        new
                        {
                            Id = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd40d397-fb18-44b4-a167-7ebda892b950",
                            Email = "guest@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Iana",
                            LastName = "Malamska",
                            LockoutEnabled = false,
                            NormalizedEmail = "guest@mail.com",
                            NormalizedUserName = "guest@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEDQQzpgu6X+uyhl1e6Y1hpj8bdFbj4PeQUi3dh9/pOctlFOKbd117AR2ZZdf0kDN9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "edaefb8d-6ad8-4074-928e-8949dbe23497",
                            TwoFactorEnabled = false,
                            UserName = "guest@mail.com"
                        },
                        new
                        {
                            Id = "e43ce836-997d-4927-ac59-74e8c41bbfd3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "15f8832a-2d58-4cec-8e9f-c5d7e4287bfc",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Great",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB+mGF+TQbiBG8g5qLgMj5WadJNAm11IoqTH3MpNwzxzhRRts763GxdDXEBqNzGrxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec4fdd8b-e7fa-4bfe-8d7b-94d63b8f2934",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "user:fullname",
                            ClaimValue = "Dimitar Malamski",
                            UserId = "dea12856-c198-4129-b3f3-b893d8395082"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "user:fullname",
                            ClaimValue = "Ivana Koroleeva",
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "user:fullname",
                            ClaimValue = "Iana Malamska",
                            UserId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "user:fullname",
                            ClaimValue = "Great Admin",
                            UserId = "e43ce836-997d-4927-ac59-74e8c41bbfd3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Blooms___Bakes_Boutique.Infrastructure.Data.Models.Flowers.Florist", b =>
                {
                    b.HasOne("Blooms___Bakes_Boutique.Infrastructure.Data.Models.User.ApplicationUser", "User")
                        .WithOne("Florist")
                        .HasForeignKey("Blooms___Bakes_Boutique.Infrastructure.Data.Models.Flowers.Florist", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blooms___Bakes_Boutique.Infrastructure.Data.Models.Flowers.Flower", b =>
                {
                    b.HasOne("Blooms___Bakes_Boutique.Infrastructure.Data.Models.Flowers.FlowerCategory", "FlowerCategory")
                        .WithMany("Flowers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Blooms___Bakes_Boutique.Infrastructure.Data.Models.Flowers.Florist", "Florist")
                        .WithMany()
                        .HasForeignKey("FloristId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Blooms___Bakes_Boutique.Infrastructure.Data.Models.User.ApplicationUser", "Gatherer")
                        .WithMany()
                        .HasForeignKey("GathererId");

                    b.Navigation("Florist");

                    b.Navigation("FlowerCategory");

                    b.Navigation("Gatherer");
                });

            modelBuilder.Entity("Blooms___Bakes_Boutique.Infrastructure.Data.Models.Pastries.Pastry", b =>
                {
                    b.HasOne("Blooms___Bakes_Boutique.Infrastructure.Data.Models.Pastries.PastryCategory", "PastryCategory")
                        .WithMany("Pastries")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Blooms___Bakes_Boutique.Infrastructure.Data.Models.Pastries.Patissier", "Patissier")
                        .WithMany()
                        .HasForeignKey("PatissierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Blooms___Bakes_Boutique.Infrastructure.Data.Models.User.ApplicationUser", "Taster")
                        .WithMany()
                        .HasForeignKey("TasterId");

                    b.Navigation("PastryCategory");

                    b.Navigation("Patissier");

                    b.Navigation("Taster");
                });

            modelBuilder.Entity("Blooms___Bakes_Boutique.Infrastructure.Data.Models.Pastries.Patissier", b =>
                {
                    b.HasOne("Blooms___Bakes_Boutique.Infrastructure.Data.Models.User.ApplicationUser", "User")
                        .WithOne("Patissier")
                        .HasForeignKey("Blooms___Bakes_Boutique.Infrastructure.Data.Models.Pastries.Patissier", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Blooms___Bakes_Boutique.Infrastructure.Data.Models.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Blooms___Bakes_Boutique.Infrastructure.Data.Models.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blooms___Bakes_Boutique.Infrastructure.Data.Models.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Blooms___Bakes_Boutique.Infrastructure.Data.Models.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blooms___Bakes_Boutique.Infrastructure.Data.Models.Flowers.FlowerCategory", b =>
                {
                    b.Navigation("Flowers");
                });

            modelBuilder.Entity("Blooms___Bakes_Boutique.Infrastructure.Data.Models.Pastries.PastryCategory", b =>
                {
                    b.Navigation("Pastries");
                });

            modelBuilder.Entity("Blooms___Bakes_Boutique.Infrastructure.Data.Models.User.ApplicationUser", b =>
                {
                    b.Navigation("Florist");

                    b.Navigation("Patissier");
                });
#pragma warning restore 612, 618
        }
    }
}
